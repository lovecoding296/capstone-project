package funix.tgcp.booking;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import funix.tgcp.busydate.BusyDate;
import funix.tgcp.busydate.BusyDateRepository;
import funix.tgcp.notification.Notification;
import funix.tgcp.notification.NotificationService;
import funix.tgcp.util.LogHelper;

import java.time.LocalDate;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
public class BookingService {

	private static final LogHelper logger = new LogHelper(BookingService.class);
	
    @Autowired
    private BookingRepository bookingRepo;

    
    @Autowired
	private BusyDateRepository busyDateRepo;
    
    @Autowired
	private NotificationService notifiService;



    // Tạo booking mới
    @Transactional
    public Booking createBooking(Booking bookingRequest) {     
    	logger.info("");
    	
    	notifiService.sendNotification(
    			bookingRequest.getGuide(),
    			bookingRequest.getCustomer().getFullName() + " booked you, please confirm!",
    			"/dashboard#manage-bookings");
    	
    	return bookingRepo.save(bookingRequest);
    }

    // Lấy danh sách bookings của khách hàng
    public ResponseEntity<?> getBookingsByCustomer(Long customerId) {
        List<Booking> bookings = bookingRepo.findByCustomerId(customerId);
        if (bookings.isEmpty()) {
            return ResponseEntity.ok(Collections.emptyList());
        }

        return ResponseEntity.ok(bookings);
    }

    
    // Lấy danh sách bookings của guide
    public ResponseEntity<?> getBookingsByGuide(Long guideId) {
        List<Booking> bookings = bookingRepo.findByGuideId(guideId);

        if (bookings.isEmpty()) {
        	return ResponseEntity.ok(Collections.emptyList());
        }

        return ResponseEntity.ok(bookings);
    }
    
    public ResponseEntity<?> findAll() {
        List<Booking> bookings = bookingRepo.findAll();

        if (bookings.isEmpty()) {
        	return ResponseEntity.ok(Collections.emptyList());
        }

        return ResponseEntity.ok(bookings);
    }



	public void deleteBooking(Long bookingId) {
		Booking booking = bookingRepo.findById(bookingId).orElseThrow();
		bookingRepo.delete(booking);
	}

	public Optional<Booking> findById(Long bookingId) {
		return bookingRepo.findById(bookingId);
	}

	@Transactional
	public ResponseEntity<?> confirmBooking(Long bookingId) {
		Optional<Booking> bookingOpt = bookingRepo.findById(bookingId);

        if (bookingOpt.isEmpty()) {
            return ResponseEntity.status(404).body("{\"message\": \"Booking not found\", \"bookingId\": " + bookingId + "}");
        }

        Booking booking = bookingOpt.get();
        
        if (booking.getStatus() == BookingStatus.CONFIRMED) {
            return ResponseEntity.status(400).body("{\"message\": \"Booking is already confirmed\", \"bookingId\": " + bookingId + "}");
        }
        
        
        booking.setReason(null);
		booking.setStatus(BookingStatus.CONFIRMED);
		bookingRepo.save(booking);
    	
    	
		notifiService.sendNotification(
    			booking.getCustomer(),
    			booking.getGuide().getFullName() + " confirmed your booking!",
    			"/dashboard#booking-history");
		
		
		LocalDate start = booking.getStartDate();
        LocalDate end = booking.getEndDate();
        Long guideId = booking.getGuide().getId();

        while (!start.isAfter(end)) {
            boolean exists = busyDateRepo.existsByGuideIdAndDate(guideId, start);
            if (!exists) {
                BusyDate date = new BusyDate();
                date.setDate(start);
                date.setGuide(booking.getGuide());
                date.setAutoGenerated(true);
                date.setBookingId(bookingId);
                busyDateRepo.save(date);
            }
            start = start.plusDays(1);
        }

		return ResponseEntity.ok("{\"message\": \"Booking confirmed successfully\", \"bookingId\": " + bookingId + "}");
	}
	 
	@Transactional
	public ResponseEntity<?> cancelBookingByUser(Long bookingId, String reason) {
		Optional<Booking> bookingOpt = bookingRepo.findById(bookingId);

        if (bookingOpt.isEmpty()) {
            return ResponseEntity.status(404).body("{\"message\": \"Booking not found\", \"bookingId\": " + bookingId + "}");
        }

        Booking booking = bookingOpt.get();       
       

        if(booking.getStatus() == BookingStatus.PENDING) {
        	logger.info(reason);
            booking.setStatus(BookingStatus.CANCELED_BY_USER);
            booking.setReason(reason);
            bookingRepo.save(booking);        	
        	
            notifiService.sendNotification(
        			booking.getGuide(),
        			booking.getCustomer().getFullName() + " cancled booking!",
        			"/dashboard#manage-bookings");

            return ResponseEntity.ok("{\"message\": \"Booking canceled successfully\", \"bookingId\": " + bookingId + "}");
        }
        
        return ResponseEntity.status(400).body("{\"message\": \"Failed to cancel booking. Please try again later.\", \"bookingId\": " + bookingId + "}");
	}

	public ResponseEntity<?> completeBooking(Long bookingId) {
		Optional<Booking> bookingOpt = bookingRepo.findById(bookingId);

        if (bookingOpt.isEmpty()) {
            return ResponseEntity.status(404).body("{\"message\": \"Booking not found\", \"bookingId\": " + bookingId + "}");
        }

        Booking booking = bookingOpt.get();
        
        if(booking.getStatus() == BookingStatus.CONFIRMED) {
        	booking.setReason(null);
    		booking.setStatus(BookingStatus.COMPLETED);
    		bookingRepo.save(booking);
    		
    		notifiService.sendNotification(
        			booking.getCustomer(),
        			"Your booking completed, please share a feedback abour your guide!",
        			"/dashboard#manage-bookings");

    		return ResponseEntity.ok("{\"message\": \"Booking completed successfully\", \"bookingId\": " + bookingId + "}");
        }
        return ResponseEntity.status(400).body("{\"message\": \"Failed to complete booking. Please try again later.\", \"bookingId\": " + bookingId + "}");
	}

	
	@Transactional
	public ResponseEntity<?> cancelBookingByGuide(Long bookingId, String reason) {
		Optional<Booking> bookingOpt = bookingRepo.findById(bookingId);

        if (bookingOpt.isEmpty()) {
            return ResponseEntity.status(404).body("{\"message\": \"Booking not found\", \"bookingId\": " + bookingId + "}");
        }

        Booking booking = bookingOpt.get();
        
        if(booking.getStatus() == BookingStatus.CONFIRMED) {
        	logger.info(reason);
            booking.setStatus(BookingStatus.CANCELED_BY_GUIDE);
            booking.setReason(reason);
            bookingRepo.save(booking);            
            busyDateRepo.deleteByBookingId(bookingId);
            
            notifiService.sendNotification(
        			booking.getCustomer(),
        			booking.getGuide().getFullName() + " cancled your booking!",
        			"/dashboard#booking-history");

            return ResponseEntity.ok("{\"message\": \"Booking canceled successfully\", \"bookingId\": " + bookingId + "}");
        }
        
        return ResponseEntity.status(400).body("{\"message\": \"Failed to cancel booking. Please try again later.\", \"bookingId\": " + bookingId + "}");
	}

	public ResponseEntity<?> rejectBooking(Long bookingId, String reason) {
		Optional<Booking> bookingOpt = bookingRepo.findById(bookingId);

        if (bookingOpt.isEmpty()) {
            return ResponseEntity.status(404).body("{\"message\": \"Booking not found\", \"bookingId\": " + bookingId + "}");
        }

        Booking booking = bookingOpt.get();
        
        if(booking.getStatus() == BookingStatus.PENDING) {
        	logger.info(reason);
            booking.setStatus(BookingStatus.REJECTED);
            booking.setReason(reason);
            bookingRepo.save(booking);
            
            notifiService.sendNotification(
        			booking.getCustomer(),
        			booking.getGuide().getFullName() + " rejected your booking!",
        			"/dashboard#booking-history");

            return ResponseEntity.ok("{\"message\": \"Booking rejected successfully\", \"bookingId\": " + bookingId + "}");
        }
        
        return ResponseEntity.status(400).body("{\"message\": \"Failed to reject booking. Please try again later.\", \"bookingId\": " + bookingId + "}");
	
	}


	public List<Booking> findBookingByFilter(String destination, LocalDate startDate,
			LocalDate endDate, String guide, BookingStatus status) {
		return null;
	}
	
	public long countCompletedByUserIdOrGuideId(Long userId) {
		return bookingRepo.countCompletedByUserIdOrGuideId(userId);
	}

	public Page<Booking> findBookingByCustomerAndFilter(Long customerId, String destination, LocalDate startDate,
			LocalDate endDate, String guide, BookingStatus status, Pageable pageable) {

		return bookingRepo.findBookingByCustomerAndFilter(customerId, destination, startDate, endDate, guide, status,
				pageable);
	}

	public Page<Booking> findBookingByGuideAndFilter(Long guideId, String destination, LocalDate startDate,
			LocalDate endDate, String user, BookingStatus status, Pageable pageable) {

		return bookingRepo.findBookingByGuideAndFilter(guideId, destination, startDate, endDate, user, status,
				pageable);
	}
}

