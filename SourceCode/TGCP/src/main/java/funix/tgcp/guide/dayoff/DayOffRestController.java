package funix.tgcp.guide.dayoff;

import java.time.LocalDate;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import funix.tgcp.config.CustomUserDetails;
import funix.tgcp.user.User;
import funix.tgcp.user.UserService;
import funix.tgcp.util.LogHelper;

@RestController
public class DayOffRestController {

	private static final LogHelper logger = new LogHelper(DayOffRestController.class);

	
	@Autowired
	UserService userService;
	
	@Autowired
	DayOffRepository dayOffRepository;
	
    //Lấy danh sách ngày nghỉ của guide hiện tại
    @GetMapping("/api/guides/day-off")
    public List<DayOff> getDayOffs(@AuthenticationPrincipal CustomUserDetails auth) {
    	
    	User guide;
    	
    	if(auth == null) {
    		guide = new User();
    		guide.setId((long)5);
    	} else {
    		guide = auth.getUser();
    	}
    	
    	logger.info("guide.getId() " + guide.getId());
    	
    	return dayOffRepository.findByGuideId(guide.getId());         
    	
    }
    
    @GetMapping("/api/guides/{id}/day-off")
    public List<DayOff> getDayOffsByGuideId(@PathVariable Long id) {
    	
    	logger.info("id " + id);
    	return dayOffRepository.findByGuideId(id);         
    	
    }
	
	@PostMapping("/api/guides/day-off")
	public ResponseEntity<?> saveDayOffs(
			@RequestBody List<LocalDate> dates,
			@AuthenticationPrincipal CustomUserDetails auth) {
		logger.info("");
		User guide;
		
    	if(auth == null) {
    		guide = new User();
    		guide.setId((long)5);
    	} else {
    		guide = auth.getUser();
    	}
		
    	
    	logger.info("guide.getId() " + guide.getId());
		
	    for (LocalDate date : dates) {
	        
			if (!dayOffRepository.existsByGuideIdAndDate(guide.getId(), date)) {
	            DayOff d = new DayOff();
	            d.setDate(date);
	            d.setGuide(guide);
	            d.setAutoGenerated(false);
	            
	            logger.info("save " + d.toString());
	            dayOffRepository.save(d);
	        }
	    }
	    return ResponseEntity.ok().build();
	}
	
	@PostMapping("/api/guides/day-off/delete")
	public ResponseEntity<?> deleteUnavailableDates(
			@RequestBody List<LocalDate> dates,
			@AuthenticationPrincipal CustomUserDetails auth) {
		User guide;
		
    	if(auth == null) {
    		guide = new User();
    		guide.setId((long)5);
    	} else {
    		guide = auth.getUser();
    	}

	    List<DayOff> toDelete = dayOffRepository
	        .findByGuideId(guide.getId())
	        .stream()
	        .filter(d -> !d.isAutoGenerated() && dates.contains(d.getDate()))
	        .toList();
	    
	    logger.info("guide.getId() " + guide.getId());

	    dayOffRepository.deleteAll(toDelete);

	    return ResponseEntity.ok().build();
	}

	
	

}
